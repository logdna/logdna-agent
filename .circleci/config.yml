version: 2.1
executors:
  docker-publisher:
    environment:
      ICR_IMAGE_NAME: icr.io/ext/logdna-agent
      IMAGE_NAME: logdna/logdna-agent
      MAJOR_VERSION: 1.
    docker:
      - image: circleci/buildpack-deps:stretch
  linux-publisher:
    environment:
      DEBIAN: deb
      DESCRIPTION: LogDNA Agent for Linux
      INPUT_TYPE: dir
      LICENSE: MIT
      MAINTAINER: support@logdna.com
      MAJOR_VERSION: 1.
      NAME: logdna-agent
      REDHAT: rpm
      URL: http://logdna.com/
      VENDOR: LogDNA, Inc.
    docker:
      - image: circleci/node:8.3.0
jobs:
  test:
    docker:
      - image: circleci/node:8.3.0
    steps:
      - checkout
      - run: npm install
      - run: npm run lint
      - run: npm run test
  linux-build:
    executor: linux-publisher
    steps:
      - checkout
      - run:
          name: Check Tagged Version
          command: |
            TAG_VERSION=$(git tag --sort=-creatordate | head -n 1)
            PKG_VERSION=$(cat package.json | grep version | cut -d':' -f2 | cut -d '"' -f2)
            if [[ "${TAG_VERSION}" != "${PKG_VERSION}" || "${TAG_VERSION}" != "${CIRCLE_TAG}" || ${CIRCLE_TAG} != ${MAJOR_VERSION}* ]]; then
              echo "There is mismatch:"
              echo "  TAG_VERSION: ${TAG_VERSION}"
              echo "  PKG_VERSION: ${PKG_VERSION}"
              exit 1
            fi
            echo "export VERSION=${CIRCLE_TAG}" >> ${BASH_ENV}
            source ${BASH_ENV}
      - run:
          name: Install Dependencies
          command: |
            sudo npm install -g nexe
            sudo apt-get install ruby ruby-dev rubygems build-essential
            sudo gem install --no-ri --no-rdoc fpm
      - run:
          name: Prepare Folders and Files
          command: |
            mkdir -p .build/scripts
            cp ./scripts/linux/* .build/scripts/
      - run:
          name: Build Executable
          command: nexe -i index.js -o .build/logdna-agent -t linux-x64-8.3.0
      - run:
          name: Package for Debian
          command: |
            fpm \
              --input-type ${INPUT_TYPE}\
              --output-type ${DEBIAN}\
              --name ${NAME}\
              --version ${VERSION}\
              --license ${LICENSE}\
              --vendor ${VENDOR}\
              --description ${DESCRIPTION}\
              --url ${URL}\
              --maintainer ${MAINTAINER}\
              --before-remove ./.build/scripts/before-remove\
              --after-upgrade ./.build/scripts/after-upgrade\
              --force --deb-no-default-config-files\
                ./.build/logdna-agent=/usr/bin/logdna-agent\
                ./.build/scripts/init-script=/etc/init.d/logdna-agent\
                ./.build/scripts/logrotate=/etc/logrotate.d/logdna-agent
      - run:
          name: Package for RedHat
          command: |
            fpm \
              --input-type ${INPUT_TYPE}\
              --output-type ${REDHAT}\
              --name ${NAME}\
              --version ${VERSION}\
              --license ${LICENSE}\
              --vendor ${VENDOR}\
              --description ${DESCRIPTION}\
              --url ${URL}\
              --maintainer ${MAINTAINER}\
              --before-remove ./.build/scripts/before-remove\
              --after-upgrade ./.build/scripts/after-upgrade\
              --force\
                ./.build/logdna-agent=/usr/bin/logdna-agent\
                ./.build/scripts/init-script=/etc/init.d/logdna-agent\
                ./.build/scripts/logrotate=/etc/logrotate.d/logdna-agent
      - persist_to_workspace:
          root: .
          paths:
            - ./logdna-agent_${VERSION}_amd64.${DEBIAN}
            - ./logdna-agent_${VERSION}_amd64.${REDHAT}
  image-build:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Set Environment Variables
          command: |
            DOCKER_TAG=$(wget -q https://registry.hub.docker.com/v1/repositories/logdna/logdna-agent/tags -O - | jq -r '.[] | .name' | awk '!/-/ && /\./ { print $1}' | grep ${MAJOR_VERSION} | tail -1)
            if [[ ${CIRCLE_TAG} == ${MAJOR_VERSION}* ]]; then
              IMAGE_TAG=${CIRCLE_TAG}
            else
              IMAGE_TAG=${DOCKER_TAG}
            fi
            echo "export DATESTAMP=$(date +%Y%m%d)" >> env-vars
            echo "export IMAGE_TAG=${IMAGE_TAG}" >> env-vars
            cat env-vars >> ${BASH_ENV} && source ${BASH_ENV}
      - run:
          name: Build Docker image
          command: docker build -t ${IMAGE_NAME}:sandbox-${DATESTAMP} .
      - run:
          name: Archive Docker image
          command: docker save -o image.tar ${IMAGE_NAME}:sandbox-${DATESTAMP}
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar
            - ./env-vars
  docker-sysdig-scan:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Set Environment Variables
          command: cat /tmp/workspace/env-vars >> ${BASH_ENV} && source ${BASH_ENV}
      - run:
          name: Authenticate to Docker Hub
          command: echo ${DOCKERHUB_PASS} | docker login -u ${DOCKERHUB_USERNAME} --password-stdin
      - run:
          name: Load Archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Publish Docker Image to Docker Hub as Sandbox
          command: docker push ${IMAGE_NAME}:sandbox-${DATESTAMP}
      - run:
          name: Scan Sandbox Image
          command: docker run -e IMAGE_TO_SCAN=${IMAGE_NAME}:sandbox-${DATESTAMP} -e SYSDIG_SECURE_TOKEN=${SYSDIG_SECURE_TOKEN} logdna/sysdigsecure
  docker-hub-upload:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Set Environment Variables
          command: cat /tmp/workspace/env-vars >> ${BASH_ENV} && source ${BASH_ENV}
      - run:
          name: Authenticate to Docker Hub
          command: echo ${DOCKERHUB_PASS} | docker login -u ${DOCKERHUB_USERNAME} --password-stdin
      - run:
          name: Load Archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Tag and Push Docker Image to Docker Hub
          command: |
            TAGS=( latest ${IMAGE_TAG} ${IMAGE_TAG}-${DATESTAMP} )
            for TAG in ${TAGS[@]}; do
              docker tag ${IMAGE_NAME}:sandbox-${DATESTAMP} ${IMAGE_NAME}:${TAG}
              docker push ${IMAGE_NAME}:${TAG}
            done
  ibm-registry-upload:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Set Environment Variables
          command: cat /tmp/workspace/env-vars >> ${BASH_ENV} && source ${BASH_ENV}
      - run:
          name: Authenticate to IBM Container Registry
          command: echo ${IBM_API_KEY} | docker login -u iamapikey --password-stdin icr.io
      - run:
          name: Load Archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Tag and Push Docker Image to Docker Hub
          command: |
            TAGS=( latest ${IMAGE_TAG} ${IMAGE_TAG}-${DATESTAMP} )
            for TAG in ${TAGS[@]}; do
              docker tag ${IMAGE_NAME}:sandbox-${DATESTAMP} ${ICR_IMAGE_NAME}:${TAG}
              docker push ${ICR_IMAGE_NAME}:${TAG}
            done
workflows:
  version: 2
  test:
    jobs:
      - test
  publish-linux:
    jobs:
      - test:
          filters:
            tags:
              only: /[0-9]+\.[0-9]+\.[0-9]+/
            branches:
              ignore: /.*/
      - linux-build:
          requires:
            - test
          filters:
            tags:
              only: /[0-9]+\.[0-9]+\.[0-9]+/
            branches:
              ignore: /.*/
  publish-image:
    jobs:
      - test:
          filters:
            tags:
              only: /[0-9]+\.[0-9]+\.[0-9]+/
            branches:
              ignore: /.*/
      - image-build:
          requires:
            - test
          filters:
            tags:
              only: /[0-9]+\.[0-9]+\.[0-9]+/
            branches:
              ignore: /.*/
      - docker-sysdig-scan:
          requires:
            - image-build
          filters:
            tags:
              only: /[0-9]+\.[0-9]+\.[0-9]+/
            branches:
              ignore: /.*/
      - docker-hub-upload:
          requires:
            - docker-sysdig-scan
          filters:
            tags:
              only: /[0-9]+\.[0-9]+\.[0-9]+/
            branches:
              ignore: /.*/
      - ibm-registry-upload:
          type: approval
          requires:
            - docker-sysdig-scan
          filters:
            tags:
              only: /[0-9]+\.[0-9]+\.[0-9]+/
            branches:
              ignore: /.*/
  monthly-build:
    triggers:
      - schedule:
          cron: "0 0 9 * *"
          filters:
            branches:
              only: master
    jobs:
      - test
      - image-build:
          requires:
            - test
      - docker-sysdig-scan:
          requires:
            - image-build
      - docker-hub-upload:
          type: approval
          requires:
            - docker-sysdig-scan
      - ibm-registry-upload:
          requires:
            - docker-hub-upload
